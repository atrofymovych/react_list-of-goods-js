{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ALPHABET","SORT_FIELD_LENGTH","App","useState","sortField","setSortField","reversed","setReversed","visibleGoods","goods","sortedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAsB,WACtBC,EAAoB,SAyBnB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACMC,EA1BR,SAA0BC,EAA1B,GAA2D,IAAxBL,EAAuB,EAAvBA,UAAWE,EAAY,EAAZA,SACxCI,EAAW,YAAOD,GAmBtB,OAjBIL,GACFM,EAAYC,MAAK,SAACC,EAAOC,GACvB,OAAQT,GACN,KAAKJ,EACH,OAAOY,EAAME,cAAcD,GAC7B,KAAKZ,EACH,OAAOW,EAAMG,OAASF,EAAME,OAC9B,QACE,OAAO,MAKXT,IACFI,EAAcA,EAAYM,WAGrBN,EAMcO,CAAiBlB,EACpC,CAAEK,YAAWE,aAEf,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMd,EAAaL,IAC5BoB,KAAK,SACLF,UAAWG,IAAG,iBACZ,CAAE,WAAYjB,IAAcJ,IAJhC,iCASA,wBACEmB,QAAS,kBAAMd,EAAaJ,IAC5BmB,KAAK,SACLF,UAAWG,IAAG,oBACZ,CAAE,WAAYjB,IAAcH,IAJhC,4BASA,wBACEkB,QAAS,kBAAMZ,GAAaD,IAC5Bc,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CAAE,YAAaf,IAHpD,sBAQEF,GAAaE,IACb,wBACEa,QAAS,WACPd,EAAa,IACbE,GAAY,IAEda,KAAK,SACLF,UAAU,4BANZ,sBAaJ,6BACGV,EAAac,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YC5FnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ce028477.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPHABET = 'alphabet';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPreparedGoods(goods, { sortField, reversed }) {\n  let sortedGoods = [...goods];\n\n  if (sortField) {\n    sortedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPHABET:\n          return good1.localeCompare(good2);\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reversed) {\n    sortedGoods = sortedGoods.reverse();\n  }\n\n  return sortedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reversed, setReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer,\n    { sortField, reversed });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SORT_FIELD_ALPHABET)}\n          type=\"button\"\n          className={cn('button is-info',\n            { 'is-light': sortField !== SORT_FIELD_ALPHABET })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n          type=\"button\"\n          className={cn('button is-success',\n            { 'is-light': sortField !== SORT_FIELD_LENGTH })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setReversed(!reversed)}\n          type=\"button\"\n          className={cn('button is-warning', { 'is-light': !reversed })}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reversed) && (\n          <button\n            onClick={() => {\n              setSortField('');\n              setReversed(false);\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}